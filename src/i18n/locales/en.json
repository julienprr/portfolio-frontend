{
  "hero": {
    "title": "Hello, I'm ",
    "subtitle": "Welcome on my Portofolio",
    "contact": "Contact me"
  },
  "footer": {
    "developpedBy": "Website developed by ",
    "contact": "Contact me at ",
    "visit": "or visit my "
  },
  "projects": {
    "buttons": {
      "contact": "Contact me",
      "viewProject": "View Project"
    },
    "titles": {
      "about": "About",
      "technologies": "Technologies Used",
      "keyConcepts": "Key Concepts",
      "links": "Links",
      "contributors": "Contributors"
    },
    "play-manager": {
      "subtitle": "Visualize and manage your Spotify profile and playlists.",
      "p1": "This application allows you to visualize and explore insights about your favorite tracks and artists acrossdifferent time ranges, all within a clear and intuitive interface.",
      "p2": " It also provides advanced playlist management features, such as shuffling entire playlists, sorting tracks by release date, and enabling automatic sorting through scheduled cron jobs to keep your playlists organized effortlessly."
    },
    "my-vps": {
      "subtitle": "VPS managed by myself with Linux / K3S / Hostinger & More.",
      "p1": {
        "title": "Building a Kubernetes Infrastructure on a VPS",
        "content": "As part of my personal projects and to strengthen my expertise in infrastructure and DevOps, I designed and deployed a full Kubernetes-based architecture on a VPS to host and automate the management of multiple web applications. The goal was to create a modern environment aligned with enterprise standards, while mastering tools for deployment, monitoring, and security."
      },
      "p2": {
        "title": "Cluster Deployment and Management",
        "content": "I used K3s to deploy a lightweight Kubernetes cluster on the VPS, structured into multiple namespaces for dev, prod, and logging. Helm charts and Makefiles automate deployments and updates."
      },
      "p3": {
        "title": "Security and Traffic Routing",
        "content": "An Nginx Ingress Controller routes HTTPS traffic, secured by cert-manager with Let's Encrypt certificates for all applications."
      },
      "p4": {
        "title": "Monitoring and Logs",
        "content": "The ELK stack (Elasticsearch, Logstash, Kibana) provides centralized logging and monitoring. Filebeat collects and forwards logs to Elasticsearch."
      },
      "p5": {
        "title": "Secret Management",
        "content": "Sealed Secrets encrypt sensitive data for safe version control. The sealed secrets are applied automatically in the cluster."
      },
      "p6": {
        "title": "Automation and DevOps Practices",
        "content": "The infrastructure is fully versioned and managed with Infrastructure as Code practices, enabling quick deployment and scaling."
      }
    },
    "compdoc": {
      "subtitle": "An academic tool to compare jury reports and bibliographies for CAPES preparation.",
      "p1": {
        "title": "Project Context",
        "content": "CompDoc was initiated by the DRUID research team at the University of Rennes within the CLARA project framework. It is designed to support students preparing for the biology CAPES exam by providing insights into recurring oral exam topics and relevant bibliographies. As part of this academic collaboration, our team self-organized and took the project from conception to deployment."
      },
      "p2": {
        "title": "Analyzing Jury Reports and Bibliographies",
        "content": "The tool enables students to compare jury reports and bibliographies from different years, highlighting key differences and trends. This feature helps candidates identify which topics to prioritize for their oral exams and which books they are allowed to consult during the test."
      },
      "p3": {
        "title": "Advanced Data Processing and Visualization",
        "content": "CompDoc integrates data analysis techniques such as cosine similarity and lemmatization to associate chapters with specific oral exam topics. It also provides visual representations of semantic relationships between key terms in the biology domain, helping users understand connections in the material more effectively."
      },
      "p4": {
        "title": "Technical Stack and Deployment",
        "content": "The backend was built with Python using FastAPI to deliver a robust REST API for document analysis. On the frontend, we used Preact with Material UI to design a fast, intuitive interface supporting advanced search and filtering features. The application was deployed using Docker Compose and served with Nginx for production readiness."
      },
      "p5": {
        "title": "Collaboration and Workflow",
        "content": "Throughout the project, we followed Agile methodologies with regular sprints and demos. Professors acted as Product Owners, guiding the development process. We also adopted Gitflow for efficient branch management, ensuring a smooth collaborative workflow."
      }
    }
  }
}
